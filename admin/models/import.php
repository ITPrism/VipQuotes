<?php
/**
 * @package      VipQuotes
 * @subpackage   Component
 * @author       Todor Iliev
 * @copyright    Copyright (C) 2014 Todor Iliev <todor@itprism.com>. All rights reserved.
 * @license      GNU General Public License version 3 or later; see LICENSE.txt
 */

// no direct access
defined('_JEXEC') or die;

class VipQuotesModelImport extends JModelForm
{
    /**
     * Method to get the record form.
     *
     * @param   array   $data     An optional array of data for the form to interogate.
     * @param   boolean $loadData True if the form is to load its own data (default case), false if not.
     *
     * @return  JForm   A JForm object on success, false on failure
     * @since   1.6
     */
    public function getForm($data = array(), $loadData = true)
    {
        // Get the form.
        $form = $this->loadForm($this->option . '.import', 'import', array('control' => 'jform', 'load_data' => $loadData));
        if (empty($form)) {
            return false;
        }

        return $form;
    }

    /**
     * Method to get the data that should be injected in the form.
     *
     * @return  mixed   The data for the form.
     * @since   1.6
     */
    protected function loadFormData()
    {
        // Check the session for previously entered form data.
        $data = JFactory::getApplication()->getUserState($this->option . '.edit.import.data', array());

        return $data;
    }

    public function extractFile($file, $destFolder)
    {
        // extract type
        $zipAdapter = JArchive::getAdapter('zip');
        $zipAdapter->extract($file, $destFolder);

        $dir = new DirectoryIterator($destFolder);

        $filePath = "";

        foreach ($dir as $fileinfo) {
            if (!$fileinfo->isDot()) {
                $filePath = $destFolder . DIRECTORY_SEPARATOR . JFile::makeSafe($fileinfo->getFilename());
            }
        }

        return $filePath;
    }

    public function uploadFile($fileData)
    {
        $app = JFactory::getApplication();
        /** @var $app JApplicationAdministrator */

        $uploadedFile = Joomla\Utilities\ArrayHelper::getValue($fileData, 'tmp_name');
        $uploadedName = Joomla\Utilities\ArrayHelper::getValue($fileData, 'name');
        $errorCode    = Joomla\Utilities\ArrayHelper::getValue($fileData, 'error');

        $destination = JPath::clean($app->get("tmp_path")) . DIRECTORY_SEPARATOR . JFile::makeSafe($uploadedName);

        $file = new Prism\File\File();

        // Prepare size validator.
        $KB       = 1024 * 1024;
        $fileSize = (int)$app->input->server->get('CONTENT_LENGTH');

        $mediaParams   = JComponentHelper::getParams("com_media");
        /** @var $mediaParams Joomla\Registry\Registry */

        $uploadMaxSize = $mediaParams->get("upload_maxsize") * $KB;

        // Prepare size validator.
        $sizeValidator = new Prism\File\Validator\Size($fileSize, $uploadMaxSize);

        // Prepare server validator.
        $serverValidator = new Prism\File\Validator\Server($errorCode, array(UPLOAD_ERR_NO_FILE));

        $file->addValidator($sizeValidator);
        $file->addValidator($serverValidator);

        // Validate the file
        if (!$file->isValid()) {
            throw new RuntimeException($file->getError());
        }

        // Prepare uploader object.
        $uploader = new Prism\File\Uploader\Local($uploadedFile);
        $uploader->setDestination($destination);

        // Upload the file
        $file->setUploader($uploader);
        $file->upload();

        $fileName = basename($destination);

        // Extract file if it is archive
        $ext = JString::strtolower(JFile::getExt($fileName));
        if (strcmp($ext, "zip") == 0) {

            $destFolder = JPath::clean($app->get("tmp_path")) . "/quotes";
            if (is_dir($destFolder)) {
                JFolder::delete($destFolder);
            }

            $filePath = $this->extractFile($destination, $destFolder);

        } else {
            $filePath = $destination;
        }

        return $filePath;
    }

    /**
     *
     * Import locations from TXT or XML file.
     * The TXT file comes from geodata.org
     * The XML file is generated by the current extension ( VipQuotes )
     *
     * @param string $file    A path to file
     * @param bool   $resteId Reset existing IDs with new ones.
     */
    public function importQuotes($file, $resteId = false)
    {
        $ext = JString::strtolower(JFile::getExt($file));

        switch ($ext) {
            case "xml":
                $this->importQuotesXml($file, $resteId);
                break;
            default: // CSV ( Joomla! 1.5 )
                $this->importQuotesCsv($file, $resteId);
                break;
        }
    }

    /**
     * Import data from CSV file ( Joomla! 1.5 ).
     *
     * @param string $file
     * @param bool   $resteId
     *
     * @throws Exception
     */
    protected function importQuotesCsv($file, $resteId)
    {
        // Load file
        $handle = fopen($file, "r");
        if (!is_resource($handle)) {
            throw new RuntimeException(JText::sprintf("COM_VIPQUOTES_ERROR_FILE_CANT_BE_LOADED", $file));
        }

        // Help fgetcsv() to read in UTF8
        $data = array();
        setlocale(LC_ALL, 'en_US.UTF-8');
        while (false !== ($row = fgetcsv($handle, 1024, ";"))) {
            $data[] = $row;
        }
        fclose($handle);

        if (!empty($data)) {

            // Get authors.
            $authorsData = new VipQuotes\Author\Authors(JFactory::getDbo());
            $authorsData->load();
            $authors = $authorsData->getNames();

            $items  = array();
            $userId = JFactory::getUser()->get("id");

            for ($i = 0, $max = count($data); $i < $max; $i++) {

                $quote = JString::trim(Joomla\Utilities\ArrayHelper::getValue($data[$i], 0));
                if (empty($quote)) {
                    continue;
                }

                $author   = JString::trim(Joomla\Utilities\ArrayHelper::getValue($data[$i], 1));
                $authorId = array_search($author, $authors);

                if (!$authorId) {

                    $alias = JApplicationHelper::stringURLSafe($author);
                    $keys = array(
                        "alias" => $alias
                    );

                    $authorTable        = $this->getTable("Author", "VipQuotesTable");
                    $authorTable->load($keys);

                    // If the author does not exist, create a new record.
                    if (!$authorTable->get("id")) {
                        $authorTable->set("name", $author);
                        $authorTable->set("alias", $alias);
                        $authorTable->store();

                        $authorId = $authorTable->get("id");
                    }

                    // Add the new author to the list with others.
                    $authors[$authorId] = $author;
                }

                $table = $this->getTable("Quote", "VipQuotesTable");
                $table->set("quote", $quote);
                $table->set("user_id", (int)$userId);
                $table->set("author_id", (int)$authorId);

                $table->store();
            }

            unset($items);
            unset($data);
        }
    }

    /**
     * Import data from XML file.
     *
     * @param string $file
     * @param bool   $resetId
     */
    protected function importQuotesXml($file, $resetId)
    {
        $xmlstr = file_get_contents($file);

        if (!empty($xmlstr)) {

            $content = new SimpleXMLElement($xmlstr);

            $userId = JFactory::getUser()->get("id");

            $items = $content->quotes->children();

            foreach ($items as $item) {

                $table = $this->getTable("Quote", "VipQuotesTable");

                $table->set("quote", (string)$item->quote);
                $table->set("created", (string)$item->created);
                $table->set("hits", (int)$item->hits);
                $table->set("published", (int)$item->published);
                $table->set("ordering", (int)$item->ordering);
                $table->set("user_id", (int)$userId);

                $table->store();

            }

            unset($content);
        }
    }

    public function validateFileType($file)
    {
        // Get file extension
        $ext = JString::strtolower(JFile::getExt($file));

        // Get MIME type of the file
        $finfo        = finfo_open(FILEINFO_MIME_TYPE);
        $fileMimeType = finfo_file($finfo, $file);
        finfo_close($finfo);

        $allowedExt = array("csv", "xml");
        if (!in_array($ext, $allowedExt)) {
            throw new RuntimeException(JText::sprintf("COM_VIPQUOTES_ERROR_INVALID_MIME_TYPE", "XML, CSV"));
        }

        // Validate CSV
        if ((strcmp("csv", $ext) == 0) and (strcmp("text/plain", $fileMimeType) != 0)) {
            throw new RuntimeException(JText::sprintf("COM_VIPQUOTES_ERROR_INVALID_MIME_TYPE", "XML, CSV"));
        }

        // Validate XML
        if ((strcmp("xml", $ext) == 0) and (strcmp("application/xml", $fileMimeType) != 0)) {
            throw new RuntimeException(JText::sprintf("COM_VIPQUOTES_ERROR_INVALID_MIME_TYPE", "XML, CSV"));
        }
    }
}
